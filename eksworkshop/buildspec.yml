version: 0.2

env:
  git-credential-helper: yes

  variables:
    TF_VERSION: "1.3.7"

phases:
  install:
    commands:
      - export CI=true
      - export CODEBUILD=true
      - #export CODEBUILD_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
      - export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - if [ "$CODEBUILD_GIT_BRANCH" = "" ] ; then
          CODEBUILD_GIT_BRANCH="$(git branch -a --contains HEAD | sed -n 2p | awk '{ printf $1 }')";
          export CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH#remotes/origin/};
        fi
      - export CODEBUILD_GIT_CLEAN_BRANCH="$(echo $CODEBUILD_GIT_BRANCH | tr '/' '.')"
      - export CODEBUILD_GIT_ESCAPED_BRANCH="$(echo $CODEBUILD_GIT_CLEAN_BRANCH | sed -e 's/[]\/$*.^[]/\\\\&/g')"
      - export CODEBUILD_GIT_MESSAGE="$(git log -1 --pretty=%B)"
      - export CODEBUILD_GIT_AUTHOR="$(git log -1 --pretty=%an)"
      - export CODEBUILD_GIT_AUTHOR_EMAIL="$(git log -1 --pretty=%ae)"
      - export CODEBUILD_GIT_COMMIT="$(git log -1 --pretty=%H)"
      - export CODEBUILD_GIT_SHORT_COMMIT=$(echo $CODEBUILD_SOURCE_VERSION | cut -c 1-7)
      - export CODEBUILD_GIT_TAG="$(git describe --tags --exact-match 2>/dev/null)"
      - export CODEBUILD_GIT_MOST_RECENT_TAG="$(git describe --tags --abbrev=0)"
      - export CODEBUILD_PULL_REQUEST=false
      - case "${CODEBUILD_SOURCE_VERSION}" in
          *pr/*   ) echo "pull request";
                    export PULL_REQUEST=$(echo ${CODEBUILD_SOURCE_VERSION} | tr / -);
                    export CODEBUILD_PULL_REQUEST="${PULL_REQUEST}";
                    export CODEBUILD_GIT_CLEAN_BRANCH=${CODEBUILD_PULL_REQUEST};
                    ;;
          *       ) echo "not pull request";;
        esac
      - if [ "${CODEBUILD_SOURCE_VERSION}" = *"pr/"* ]; then
          echo "pull request";
          export PULL_REQUEST=$(echo ${CODEBUILD_SOURCE_VERSION} | tr / -);
          export CODEBUILD_PULL_REQUEST="${CODEBUILD_GIT_BRANCH}-${PULL_REQUEST}";
          export CODEBUILD_GIT_CLEAN_BRANCH=${CODEBUILD_GIT_CLEAN_BRANCH};
        else
          echo "not pull request";
        fi
      #- if [ "${CODEBUILD_GIT_BRANCH#pr-}" != "$CODEBUILD_GIT_BRANCH" ] ; then
      #    export CODEBUILD_PULL_REQUEST=${CODEBUILD_GIT_BRANCH#pr-};
      #  fi
      - export CODEBUILD_PROJECT=${CODEBUILD_BUILD_ID%:$CODEBUILD_LOG_PATH}
      - export CODEBUILD_BUILD_URL=https://$AWS_DEFAULT_REGION.console.aws.amazon.com/codebuild/home?region=$AWS_DEFAULT_REGION#/builds/$CODEBUILD_BUILD_ID/view/new
      - export IMAGE_TAG=$CODEBUILD_GIT_SHORT_COMMIT
      - #export ACCOUNT=$CODEBUILD_ACCOUNT_ID
      - #echo "==> AWS CodeBuild Extra Environment Variables:"
      - #echo "==> CI = $CI"
      - #echo "==> CODEBUILD = $CODEBUILD"
      - echo "==> CODEBUILD_ACCOUNT_ID = $CODEBUILD_ACCOUNT_ID"
      - #echo "==> CODEBUILD_GIT_AUTHOR = $CODEBUILD_GIT_AUTHOR"
      - #echo "==> CODEBUILD_GIT_AUTHOR_EMAIL = $CODEBUILD_GIT_AUTHOR_EMAIL"
      - #echo "==> CODEBUILD_GIT_BRANCH = $CODEBUILD_GIT_BRANCH"
      - #echo "==> CODEBUILD_GIT_CLEAN_BRANCH = $CODEBUILD_GIT_CLEAN_BRANCH"
      - #echo "==> CODEBUILD_GIT_ESCAPED_BRANCH = $CODEBUILD_GIT_ESCAPED_BRANCH"
      - #echo "==> CODEBUILD_GIT_COMMIT = $CODEBUILD_GIT_COMMIT"
      - #echo "==> CODEBUILD_GIT_SHORT_COMMIT = $CODEBUILD_GIT_SHORT_COMMIT"
      - #echo "==> CODEBUILD_GIT_MESSAGE = $CODEBUILD_GIT_MESSAGE"
      - #echo "==> CODEBUILD_GIT_TAG = $CODEBUILD_GIT_TAG"
      - #echo "==> CODEBUILD_GIT_MOST_RECENT_TAG = $CODEBUILD_GIT_MOST_RECENT_TAG"
      - echo "==> CODEBUILD_PROJECT = $CODEBUILD_PROJECT"
      - #echo "==> CODEBUILD_PULL_REQUEST = $CODEBUILD_PULL_REQUEST"
      - if [ "$CODEBUILD_GIT_CLEAN_BRANCH" = "master" ] ; then
          export DEPLOY_DIR='/';
        else
          export DEPLOY_DIR=${CODEBUILD_GIT_CLEAN_BRANCH};
        fi
      - echo '***** This is the current env:'
      - printenv


  build:
    commands:
      # install required binary
      - #echo "yum installs"
      - #"yum -y -q -e 0 install moreutils bash-completion nmap bind-utils"
      - echo "Install aws cli"
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip -qq awscliv2.zip
      - ./aws/install
      - rm -f awscliv2.zip
      - export AWS_RAW_CRED=$(curl --silent http://169.254.170.2:80$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI)
      - export AWS_ACCESS_KEY_ID=$(echo $AWS_RAW_CRED | jq -r '.AccessKeyId')
      - export AWS_SECRET_ACCESS_KEY=$(echo $AWS_RAW_CRED | jq -r '.SecretAccessKey')
      - export AWS_SESSION_TOKEN=$(echo $AWS_RAW_CRED | jq -r '.Token')
      - reg=$(echo $CODEBUILD_BUILD_ARN | cut -f4 -d':')
      - acc=$(echo $CODEBUILD_BUILD_ARN | cut -f5 -d':')
      - export AWS_REGION=$(echo $reg)
      - export TF_VAR_region=$(echo $reg)
      - export ACCOUNT_ID=$(echo $acc)
      - echo $AWS_ACCESS_KEY_ID
      - echo $AWS_SECRET_ACCESS_KEY
      - echo $CODEBUILD_SRC_DIR
      - s3b=`echo "tf-state-$acc-$reg"`
      - echo $s3b
      - aws s3 mb s3://$s3b 2> /dev/null || true
      - of="backend-s3.tf"
      - printf "terraform {\n" > $of
      - printf "backend \"s3\" {\n" >> $of
      - printf "bucket = \"%s\"\n" $s3b >> $of
      - printf "key = \"eksworkshopv2/terraform.tfstate\"\n" >> $of
      - printf "region = \"%s\"\n"  $reg >> $of
      - printf "encrypt = \"true\"\n"   >> $of
      - printf "}\n" >> $of
      - printf "}\n" >> $of
      - ls
      - cat $of
      - if [[ $TFOP == "" ]];then TFOP="apply"; fi
      - wget -q https://releases.hashicorp.com/terraform/1.3.7/terraform_1.3.7_linux_amd64.zip
      - unzip -qq terraform_1.3.7_linux_amd64.zip
      - mv terraform /usr/local/bin/
      - rm -f terraform_1.3.7_linux_amd64.zip
      - #echo "kubectl"
      - #curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
      - #chmod +x ./kubectl
      - #mv ./kubectl /usr/local/bin/kubectl
      - aws sts get-caller-identity
      - echo $AWS_REGION
      - echo $ACCOUNT_ID
      - cd "$CODEBUILD_SRC_DIR"
      - python --version
      - export PATH=/usr/local/bin:$PATH
      - which aws
      - aws --version
      - terraform version -no-color
      - echo "TF_VAR_region=$TF_VAR_region"
      - export TF_VAR_cloud9_owner=`echo "arn:aws:iam::${ACCOUNT_ID}:assumed-role/TeamRole/MasterKey"`
      - export TF_VAR_eks_role_arns=`echo "[ \"arn:aws:iam::${ACCOUNT_ID}:role/TeamRole\" ]"`
      - git clone https://github.com/aws-samples/eks-workshop-v2.git
      - cd eks-workshop-v2/terraform
      - cp ../../backend-s3.tf backend-s3.tf
      - cp modules/ide/cloud9.tf modules/ide/cloud9.tf.sav
      - cp ../../cloud9.tf modules/ide/cloud9.tf
      - # don't do Cloud9 ?
      - mv ide.tf ide.tf.sav
      - mv outputs.tf outputs.tf.sav
      - echo "Terraform TFOP = $TFOP"
      - echo "TF_VAR_cloud9_owner = $TF_VAR_cloud9_owner"
      - echo "TF_VAR_eks_role_arns = $TF_VAR_eks_role_arns"
      - echo "Terraform init.."
      - date
      - pwd
      - ls -al
      - | 
        if [[ $TFOP == "apply" ]];then   
          terraform init -no-color > /dev/null  
          time terraform apply --auto-approve
        fi
      - | 
        if [[ $TFOP == "apply" ]];then 
          echo "Cloud9 IDE"
          mv ide.tf.sav ide.tf
          mv outputs.tf.sav outputs.tf
          sleep 10
          echo "Cloud9 IDE - First attempt"
          terraform init -no-color > /dev/null 
          terraform apply --auto-approve || true 
          echo "Cloud9 IDE - Second attempt" 
          terraform apply --auto-approve
        fi
      - |
        if [[ $TFOP == "destroy" ]];then
          terraform init -no-color > /dev/null
          terraform destroy -target=module.cluster.module.eks_blueprints_kubernetes_addons --auto-approve
          terraform destroy -target=module.cluster.module.descheduler --auto-approve
          terraform destroy -target=module.cluster.module.eks_blueprints --auto-approve
          terraform destroy --auto-approve
          terraform destroy -auto-approve 
        fi
      - ls -al
  post_build:
    commands:
      - echo "completed on `date`"
      - ls -al
      - cat backend-s3.tf || true
      - aws s3 ls s3://$s3b/eksworkshopv2/ || true
      - aws sts get-caller-identity --query Arn
      - trc=$(terraform state list | wc -l)
      - echo "$trc resources in state file"
artifacts:
  files:
    - '**/*'
